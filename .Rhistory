z
x
ma
mapply(rep, 1:4, 4:1)
x
mapply(rep, 1:4, 4:1)
noise
noise <- function(n, mean, sd){}
noise <- function(n, mean, sd){}
noise <- function(n, mean, sd){}
noise <- function(n, mean, sd){rnorm(n, mean, sd)}
noise(5, 1, 2)
noise
?gl
x <-c(rnorm(10), runif(10), rnorm(10,1))
x
f <-gl(3,10)
f
split(x,f)
head(airquality)
s <- spline(airquality, airquality$Month)
s <- split(airquality, airquality$Month)
a
s
lapply(s, function(x) colMeansx[,c("Ozone", "Solar.R","Wind")]))
lapply(s, colMeansx[,c("Ozone", "Solar.R","Wind")]))
lapply(s, colMeansx[,c("Ozone", "Solar.R","Wind")])
lapply(s, colMeansx[,c("Ozone", "Solar.R","Wind")]))
lapply(s, colMeansx([,c("Ozone", "Solar.R","Wind")]))
lapply(s, colMeans(x[,c("Ozone", "Solar.R","Wind")]))
lapply(s, colMeans(x[,c("Ozone", "Solar.R","Wind")]))
lapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R","Wind")]))
log(-1)
source('E:/Luciano/R_WorkingDir/Test.R')
printmessage(1)
printmessage(NA)
printmessage(-1)
printmessage(NA)
source('E:/Luciano/R_WorkingDir/Test.R')
printmessage(NA)
m -> c(1,2,3,4,5,6,7,8)
m <- c(1,2,3,4,5,6,7,8)
printmessage(m)
m
clear(x)
delete(x)
cls(x)
remove(x)
mean(x)
traceback()
x <-21
mean(x)
traceback()
lm(y-y)
traceback()
lm(y-x)
remove(x)
lm(y-x)
trace()
traceback()
debug(lm)
lm(y-x)
library(swirl)
rm(list = ls())
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(cls_list, class)
sa
sapply(flags, class)
?sapply
sapply(flags, class, simplify = TRUE, USE.NAMES = TRUE)
sapply(cls_list, class, simplify = TRUE, USE.NAMES = TRUE)
info()
cls_vect <-sapply(falgs, class)
cls_vect <-sapply(flags, class)a
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shpae_mat <- sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, lenght)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
source('E:/Luciano/R_WorkingDir/ProgramAssignment1.R')
?head
?numeric
source('E:/Luciano/R_WorkingDir/ProgramAssignment2.R')
source('E:/Luciano/R_WorkingDir/makeCacheMatrix.R')
source('E:/Luciano/R_WorkingDir/cacheSolve.R')
?inb
?inv
?solve
c <- rbind(c(1,-1/4), c(-1/4,1))
c
solve(c)
source('E:/Luciano/R_WorkingDir/cacheSolve.R')
source('E:/Luciano/R_WorkingDir/cacheSolve.R')
source('E:/Luciano/R_WorkingDir/makeCacheMatrix.R')
source('C:/Users/Operator/ProgrammingAssignment2/cachematrix.R')
a <- makeCacheMatrix(matrix(rnorm(25),nrow = 5,ncol = 5))
source('E:/Luciano/Git/ProgrammingAssignment2/cachematrix.R')
a <- makeCacheMatrix(matrix(rnorm(25),nrow = 5,ncol = 5))
source('E:/Luciano/Git/ProgrammingAssignment2/cachematrix.R')
a <- makeCacheMatrix(matrix(rnorm(25),nrow = 5,ncol = 5))
a$get()
a$getinv()
source('E:/Luciano/Git/ProgrammingAssignment2/cachematrix.R')
source('E:/Luciano/Git/ProgrammingAssignment2/cachematrix.R')
>a <- makeCacheMatrix(matrix(rnorm(25),nrow = 5,ncol = 5))
a <- makeCacheMatrix(matrix(rnorm(25),nrow = 5,ncol = 5))
a$get()
a$getinv()
source('E:/Luciano/Git/ProgrammingAssignment2/cachematrix.R')
a$get()
a$getinv()
cacheSolve(a)
a$getinv()
cacheSolve(a)
source('E:/Luciano/Git/ProgrammingAssignment2/cachematrix.R')
a <- makeCacheMatrix(matrix(rnorm(25),nrow = 5,ncol = 5))
a$get()
a$getinverse()
cacheSolve(a)
a$getinverse()
source('E:/Luciano/Git/ProgrammingAssignment2/cachematrix.R')
exit
?str
str(str)
str(lm)
str(ls)
x <- rn
x <- rnorm(100, 2, 4)
x
summary(x)
str(x)
f <- gl(40,10)
str(f)
f
summary(f)
library(datasets)
airquality
head(ariquality)
head(airquality)
str(airquality)
summary(airquality)
m <- matrix(rnorm(100), 10, 10)
m
str(m)
m[,1]
s <- split(airquality)
s <- split(airquality, airquality$Month)
s
str(s)
x <- rnorm(10)
x
plot(x)
y <- rnorm(10, 20, 2)
plot(x, y)
plot(x)
plot(y)
y
summary(x)
summary(y)
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(1)
rnorm(5)
set.seed(1)
rnorm(5)
rpois(10, 1)
rpois(10, 2)
rpois(10, 20)
ppois(2,12)
?ppois
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y )
set.seed(10)
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2*x +e
summary(y)
plot(x,y )
set.seed(1)
x <- rno
x <- rnorm(100)
log.mu <- 0.5 + 0.3*3
y <- rpois(100, exp(log.mu))
summary(y)
plot(x,y )
set.seed(1)
sample(1:10, 4)
sample(letters, 5)
letters
sample(1:10)
sample(1:10, replace = T)
system.time()
system.time(readLines("http://www.jhsph.edu"))
hilbert <- function(n){i <- 1:n }
lm.fit
system.time(ls())
system.time(rnorm(100))
system.time(rnorm(1000))
system.time(rnorm(1000000000000000))
system.time(rnorm(10000))
system.time(rnorm(1000000))
system.time(rnorm(10000000))
system.time(rnorm(100000000))
sample.interval
$sample.interval
?Rprof
set.seed(1)
rpois(5, 2)
?rpois
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
y
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
?qpois
library(swirl)
rm(list = ls())
swirl()
ls()
class(plants)
dim(plants)
nrow(pla)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, n = 10)
tail(plants, n = 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(100, prob = c(0.3,0.7))
flips <- sample(0:1, 100, prob = c(0.3,0.7))
flips <- sample(c(0,1), 100, prob = c(0.3,0.7))
flips <- sample(c(0,1), 100, prob = c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE ,prob = c(0.3,0.7))
flips
sum(fligner.test())
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(n= 1, size = 1, prob = 0.7)
flips2 <- rbinom(n= 100, size = 1, prob = 0.7)
flips2
su
sum(flips2)
?rnom
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
cm
hist(cm)
exit
quit
?plot
library(lpydr)
exit
exit()
?exit
?quit
rm(list = ls())
library(swirl)
swirl()
head(airquality)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch = 8, col = "red", main = "Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone ~ Wind, data = airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y ~ x | f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLables.R"), local = TRUE)
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price ~ carat | color*cut, data = diamonds, strip = FALSE, pch = 20, xlab =  myxlab, ylab = myylab, main = mymain )
xyplot(price ~ carat | color*cut, data = diamonds, pch = 20, xlab =  myxlab, ylab = myylab, main = mymain )
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0, 1, len = 6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette()c("red", "yellow")
p2 <- colorRampPalette(c("red", "yellow"))
p2
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = 0.5)
p3(5)
plot(w,y, pch = 19, col = rgb(0,0.5,0.5))
plot(x,y, pch = 19, col = rgb(0,0.5,0.5))
plot(x,y, pch = 19, col = rgb(0,0.5,0.5, alpha = 0.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(x = displ, y = hwy, data = mpg)
qplot(x = displ, y = hwy, data = mpg, color = drv)
qplot(x = displ, y = hwy, data = mpg, color = drv, geom = c("points", "smooth"))
qplot(x = displ, y = hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot()
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg)
qplot(drv, hwy, data = mpg, geom = "bloxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy)
qplot(hwy, data = mpg, fill = drv)
qpl
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qpl
qplot
qplot(hwy, data = mpg, facets = drv ~., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swril Rules!")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, color = aes(drv))
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
exit()
0
info()
bye()
library(swirl)
rm(list = ls())
swirl()
g + geom_point(color = drv)
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement, y = "Hwy Mileage)
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement, y = "Hwy Mileage"")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement, y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(data = testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line(ylim(-3,3))
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(data = mpg, aes(x = disp, y = hwy, color = factor(year)))
g <- ggplot(data = mpg, aes(x = displ, y = hwy, color = factor(year)))
g
g + geom_point()
g + geom_point() + facet_grid(drv ~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv ~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv ~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x  = "Dsiplacement", y = Highway Mileage, title = "Swirl Rules!")
g + geom_point() + facet_grid(drv ~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x  = "Dsiplacement", y = "Highway Mileage", title = "Swirl Rules!")
g + geom_point() + facet_grid(drv ~cyl, margins = TRUE) + geom_smooth(method = "lm", size = 2, se = FALSE, color = "black") + labs(x  = "Dsiplacement", y = "Highway Mileage", title = "Swirl Rules!")
g + geom_point() + facet_grid(drv ~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x  = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(x = price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, prices, data = diamonds)
qplot(x = carat, y = price, data = diamonds)
qplot(x = carat, y = price, data = diamonds, shape = cut)
qplot(x = carat, y = price, data = diamonds, color = cut)
qplot(x = carat, y = price, data = diamonds, color = cut, geom_smooth(method = "lm"))
qplot(x = carat, y = price, data = diamonds, color = cut)
qplot(x = carat, y = price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(x = carat, y = price, data = diamonds, color = cut, facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(data = diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(data = diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~cut())
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
setwd("E:/Luciano/R_WorkingDir/Reproducible Research/RepData_PeerAssessment1")
listfiles <- dir()
if ("activity.csf" %in% listfiles){
actdf <- read.csv("activity.csv")
}else{
if ("activity.zip" %in% listfiles){
unzip(zipfile = "activity.zip")
actdf <- read.csv("activity.csv")
}else{
print("No files found!!!")
}
}
rm(list = ls())
listfiles <- dir()
if ("activity.csv" %in% listfiles){
actdf <- read.csv("activity.csv")
}else{
if ("activity.zip" %in% listfiles){
unzip(zipfile = "activity.zip")
actdf <- read.csv("activity.csv")
}else{
print("No files found!!!")
}
}
head(actdf)
class(actdf)
summary(actdf)
tail(actdf)
class(actdf$date)
hist(actdf)
?hist
hist(ac)
hist(actdf$steps, breaks = actdf$date)
hist(actdf$steps)
instpackages <- installed.packages()
"ggplot2" %in% instpackages
"ggplot2" !%in% instpackages
!("ggplot2" !%in% instpackages)
!("ggplot2" not %in% instpackages)
(("ggplot2" %in% instpackages) == FALSE)
(("ggplot2" %in% instpackages) == true)
(("ggplot2" %in% instpackages) == TRUE)
library(ggplot2)
qplot
qplot(stes, data = actdf, fill = date)
head(actdf)
qplot(steps, data = actdf, fill = date)
qplot(steps, data = actdf, facets = date 4., binwidth = 2)
qplot(steps, data = actdf, facets = date ~., binwidth = 2)
qplot(steps, data = actdf, facets = .~date, binwidth = 2)
